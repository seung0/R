2020-06-15

R 2강

#데이터프레임
-열벡터를 원소로 갖는 2차원 객체 : 열벡터의 속성이 서로 다를 수 있다. (행렬과 다른 점)
                           +열벡터의 길이가 서로 다르면 데이터프레임을 생성할 수 없다. (이런 경우는 리스트로 생성해야함)
-데이터프레임은 2차원이므로 인덱싱할 때, 홑대괄호 안에 콤마(,)를 추가 : 행렬의 인덱싱 및 슬라이싱 방법과 동일하다.
                                                       (만약 콤마를 추가하지 않으면 벡터처럼 원소의 열벡터를 데이터프레임으로 반환)
-데이터프레임은 '$' 기호를 이용하여 하위 원소인 컬럼명과 연결할 수 있다. 
*리스트는 원소명이 없어도 겹대괄호([[]])로 연결할 수 있었지만 데이터프레임은 무조건 원소명이 있어야 가능하다. (데이터프레임은 리스트의 하위 개념)

#데이터프레임 생성
-data.frame() 함수를 이용하여 생성
 >data.frame() 함수 안에 열벡터를 콤마(,)로 연결하여 할당한다.
 >각 열벡터 앞에 컬럼명을 지정할 수 있다. 이 때 등호(=) 사용
  *따로 컬럼명을 지정하지 않아도 정해진 규칙에 따라 컬럼명이 자동으로 생성된다.
  *따라서 데이터프레임은 항상 '$'기호를 사용하여 하위 원소와 연결할 수 있다.
 >data.fram() 함수의 'stringsAsFactors' 인자는 기본값이 FALSE인데, 이는 문자 벡터를 할당하면 자동으로 범주형 벡터로 변환된다는 것을 의미한다. 
  *따라서 편의에 따라 [stringsAsFactors = TRUE]를 지정하는 것이 좋다. 왜냐하면 문자형 벡터보다 범주형 벡터를 다루는 것이 더 까다롭기 때문이다.


df <- data.frame(num, char, logi)

---->error (벡터의 길이가 제각각이기 때문에 생성 안됌)

num <- 1:6
char <- letters[1:6]
이렇게 벡터의 길이를 다 같게 설정해준 후 다시 생성하면

df1 <- data.frame(num, char, logi) 

class(df1) ----> "data.frame"

str(df1)   ----> 6 obs. of  3 variables:
 $ num : int  1 2 3 4 5 6
 $ char: chr  "a" "b" "c "d" ...
 $ logi: logi  TRUE TRUE TRUE FALSE FALSE FALSE


View(df1) : df1 객체를 스트립트 창에서 표 형태로 확인할 수 있다. 



-'stringsAsFactors' 관련 옵션을 확인한다.

options('stringsAsFactors')  : 기본값이 FALSE인데, 이는 문자 벡터를 할당하면 자동으로 범주형 벡터로 변환된다는 것을 의미한다.

df2 <- data.frame(num, char, logi, stingsAsFactors = FALSE)
str(df2) ----> 문자 벡터가 범주형 벡터로 할당되어 있는 것을 확인

df3 <- data.frame(num, char, logi, stingsAsFactors = TRUE)
str(df3) ----> 문자 벡터가 문자형 벡터로 그대로 할당



#데이터프레임의 인덱싱 및 슬라이싱

-특정 위치의 행과 열의 원소를 출력

df2[1, ]      : '데이터프레임'
df2[1:2, ]    : '데이터프레임'
df2[, 1]      : '벡터'
df2[, c(1, 3)] : '데이터프레임'
df2[1, 1]      : '벡터'
df2[1:3, 1:3]  : '데이터프레임'

-> 이때 컬럼명으로 문자열을 지정할 수도 있다.
df2[, 'num']
df2[, c('num', 'char')]

->'$' 기호를 사용해서 해당 열 하나를 반환할 수 있다. (하나의 컬럼명만 지정할 수 있으니까 당연히 벡터로 반환)
df2&num
df2&char
(컬럼명이 숫자로 시작하거나 한글인 경우, backtick(') 또는 따옴표를 추가해야 한다.)


**열이 1개면 '정수형 벡터'


-특정 행 또는 열을 삭제

df2[-1, ] 
df2[, -1]
df2[-1, -1]

print(df2) 실행해도 원래 그대로의 값을 반환한다. (삭제한 결과를 새로운 데이터프레임에 할당해야 삭제된 값 반환 가능)


-특정 열의 원소 전체를 변경

df2$char <- LETTERS[1:6]

-특정 열의 원소 일부만 변경

df2$char[1:3] <- c('가', '나', '다') 

**데이터프레임에서 어떤 열의 값을 일부만 변경할 대에는 기존 벡터의 속성과 같은 값을 지정해야 한다.



























