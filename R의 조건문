2020-06-17

R 3강

(if 조건문, for/while 반복문, 사용자 정의 함수)

#if 조건문 만들기
-if 함수는 특정 조건을 만족할 때 뒤따르는 코드를 실행하도록 설정한다.

>if(class(lL) == 'integer') {
	print('정수입니다.')
}

*반드시 중괄호 밖에서 실행해야함!

위 조건문의 조건을 만족하지 않을 대 코드가 실행되지 않는다. 
이렇게 특정 조건을 만족하지 않으 대 실행할 코드를 추가할 수 있다.

>if(class(1L) == 'integer') {
	print('정수입니다.')
} else {
	print('정수가 아닙니다.')
}


>if(class('3') == 'integer') {
	print('정수입니다.')
} else if (class('3') == 'numeric') {
	print('실수입니다.')
} else {
	print('숫자가 아닙니다.')
}


#실습 : 프로그래밍 언어 추천하기
-전공을 입력 받고, R 또는 Python 등 공부할 프로그래밍 언어를 추천한다.

>major <- readline('전공을 입력하세요: ')

if(grepl('통계', major)) {
  print('R을 공부하세요.')
} else if(grepl('컴퓨터', major)) {
  print('Python을 공부하세요.')
} else {
  print('하고 싶은 언어를 공부하세요.')
}



#실습 : 점수를 학점으로 환산하기
-취득 점수(score)에 따라 합격 여부를 판정하는 기준
 80~100점 : 합격
 60~79점  : 재시험
 59점 이하 : 불합격

-취득 점수(score)를 합격 여부로 반환하는 조건문을 생성한다. 



score <- 30

>if (score >= 80) {
  print('합격')
} else if (score >= 60) {
  print('재시험')
} else {
  print('불합격')
}


#실습 : 난수 생성하기(random number sampling)
-R에서 복원 추출 또는 비복원 추출과 관련된 함수로는 sample() 함수가 있다.

ex) 로또 번호 추출

>sample(1:45, 6, FALSE)

1:45 --> 1부터 45번까지의 공 중에
6    --> 6개의 공을 뽑는다는 것을 의미한다.
FALSE --> 비복원추출(한 번 뽑은 공은 다시 넣지 않는다는 의미)

몇 번 실행해보면 매번 그 결과가 다르게 나오는데 난수를 생성할 때 누가 언제 실행하든지 항상 똑같은 결과를 얻어야 하면,

set.seed() 함수를 이용한다.

>set.seed(1234)

*seed 인자에 할당되는 값을 고정하면 재현 가능한(reproducible) 결과를 얻을 수 있다.
 seed 인자에 할당되는 숫자는 어떠한 것도 가능하지만 중요한 것은 사용자끼리 같은 숫자를 설정해야 한다는 것!


#가장 빈도수 높은 추출 번호 구하기

>lotto <- sample(45, 60000, TRUE)

print(lotto)
tbl <- table(lotto)
sort(tbl, decreasing = TRUE)[1:6]

*table() 빈도 수 나타내는 함수


#실습 : 난수 생성하기
-머신러닝 알고리즘을 이용하여 모델링을 하기에 앞서 전체 데이터셋을 훈련셋과 시험셋 등으로 분리할 필요가 있다.
 이 때 난수를 사용함!

>n <- nrow(iris)
set.seed(1234)

index <- sample(n, n*0.7, FALSE)

trainSet <- iris[index, ] --> 'iris'와 행번호가 'index'의 원소와 일치하는 행
testSet <- iris[-index, ] -->  일치하지 않는 행 


#실습 : 숫자 맞추기 게임 만들기
-임의의 두 자리 정수를 생성하고, 그 숫자를 맞추는 게임 만들기

number <- sample(10:99, 1)
guess <- readline('두 자리 숫자를 입력하세요: ')

if (guess == number) {
  print('맞췄습니다.')
} else {
  print('틀렸습니다.')
}


**코드 컨벤션
-협업을 한다면 코드의 가독성을 높이기 위해 코딩 스타일을 통일시켜야 하지만, 혼자만 보는 코드라도
 가독성을 높이자!

-들여쓰기 : 언어에 따라 미리 정해진 규칙을 따른다. (R studio에서 들여쓰기를 지원함)
-괄호표시 : 괄호 안에 여러 라인이 사용된다면 여는 괄호와 닫는 괄호를 피해 라인을 입력
-변수명 : 카엘(Camel case), 파스칼(Pascal case), 스네이크(Snake case)
-주석 달기 


#ifelse 조건문 만들기

-ifelse() 함수는 'test'인자에 할당된 조건을 만족하면 'yes'인자에 할당된 값을,
 조건을 만족하지 않으면 'no'인자에 할당된 값을 갖도록 한다. 

 >ifelse(1:10 %% 2 == 1, '홀수', '짝수') 

 

 -ifelse() 함수를 이용하면 데이터프레임에서 특정 조건을 만족하는 여부에 따라 파생변수를 생성할 수 있다.

>df2 <- data.frame(num = 1:6, char = letters[1:6])

df2$gb <- ifelse(df2$num %% 2 == 1, '홀수', '짝수')
print(df2)

---> df2라는 데이터프레임에 gb 컬럼이 새롭게 생성된다.


#실습 : 학사경고 대상 구분하기
-대학생 20명의 수학 점수를 데이터 프레임으로 생성한다.

>set.seed(1234)
univ <- data.frame(math = sample(49:99, 20, TRUE))


univ$result <- ifelse(univ$math < 59, 'Fail', 'Pass')
table(univ$result)

--->Fail이 몇 명인지, Pass가 몇 명인지 보여준다.


#실습 : 나이 범위가 15세~65세인 100명 중에 19세 이하는 미성년, 49세 이하는 근로자, 그 이외는 은퇴자로 데이터 프레임을 생성한다.

>set.seed(1234)
cust <- data.frame(age = sample(15:65, 100, TRUE))

cust$gb <- ifelse(cust$age <= 19, '미성년',
                  ifelse(cust$age <= 49, '근로자', '은퇴자'))
table(cust$gb)



#for 반복문

-for() 함수 안에 [변수 in 벡터] 형태를 지정한다. 
 이 때, 변수는 벡터의 원소를 차례대로 입력받아 중괄호 안의 코드를 실행한다.

>for (i in 1:10) {
  sqr <- i^2
  print(sqr)
}

>for (i in 1:10) {
  if (i %% 2 == 1) next
  print(i)
}

* 'next'는 다시 처음으로 올라가라는 의미 (print X)



>for (i in 1:10) {
  if (i %% 2 == 1) {
    print('홀수입니다.')
    next
  }
  print(i)
}



#실습 : 중국집에서 주문하기
-중국집 메뉴판에서 주문 가능한 요리 목록을 출력하는 반복문 실행

>menu <- c('짜장면', '짬뽕', '탕수육', '깐풍기', '샥스핀', '전가복')

for (i in menu) {
  cat('\n', i, '시킬까요?')
  if (!i%in% c('짜장면', '짬뽕')) next
  cat('-->요리부터 주문합시다!')
}


--> 짜장면, 짬뽕이 아니면 처음으로 올라감
    짜장면, 짬뽕이면 '요리부터 주문합시다!' 출력


 for (i in menu) {
  cat('\n', i, '시킬까요?')
  if (!i %in% c('짜장면', '짬뽕')) {
    cat('-->그걸로 되겠어요?')
    next
  }
  cat('-->요리부터 주문합시다!')
}

--> 짜장면, 짬뽕이 아니면 '그걸로 되겠어요?',
    짜장면, 짬뽕이면 '요리부터 주문합시다!' 출력


##for 반복문 실행 중 에러 회피
-for() 함수는 실행하는 도중에 에러가 발생하면 반복문 전체가 중단된다.

>for (i in 1:10) {
  sqr <- i^2
  print(sqr)
  sqrs <- c(sqrs, sqr)
}

--> error


-반복문 안에 tryCatch() 함수를 추가하여 전체 반복문의 중단을 회피할 수 있다.

>for (i in 1:10) {
  sqr <- i^2
  print(sqr)
  tryCatch({
    sqrs <- c(sqrs, sqr)
  }, error = function(e) cat('에러가 발생했습니다.\n'))
  
}



>for (i in 1:10) {
  sqr <- i^2
  print(x = sqr)
  tryCatch({
    sqrs <- c(sqrs, sqr)
  }, error = function(e) print(x = e))
}

*tryCatch() 함수 안에서 에러가 발생하면 현재 실행을 중단하고, 'error'인자를 실행한 후, 처음으로 돌아가 다음 원소를 실행한다.



#while 반복문
-while 반복문은 특정 조건을 만족하는 한, while() 함수의 괄호 안이 TRUE이면 중괄호 안의 코드를 무한 반복 실행한다.

>i <- 10

while (i) {
  print(i)
  i <- i-1
}

>i <- 1

while (i) {
  print(i)
  i <- i+1
}

>j <- 1

while (j) {
  if (j > 5) break
  print (j)
  j <- j + 1
}

*break 하면 특정 조건 상에서 실행 정지


#실습 : 별다방 선불카드로 커피 주문하기

-별다방 선불카드 잔액이 일정 금액 이하면 커피 주문이 멈추도록 한다.

>card <- 30000

while (card) {
  if (card <= 10000) break
  cat('아메리카노 한 잔 드립니다!')
  card <- card - 4100
  cat('현재 잔액은', card, '입니다\n')
}

>while (card) {
  if (card <= 10000) {
    charge <- readline('충전하시겠습니까?[예/아니오]')
    if (charge == '예') {
      card <- card + 10000
      cat('아메리카노 한 잔 드립니다!')
      card <- card - 4100
      cat('현재 잔액은', card, '입니다\n')
    } else {
      print('안녕히 가세요.')
    }
  } else {
    cat('아메리카노 한 잔 드립니다!')
    card <- card - 4100
    cat('현재 잔액은', card, '입니다\n')
  }
}



#사용자 정의 함수 생성
-function() 함수로 사용자 정의 함수를 생성할 수 있다.

>Pythagoras <- function(a, b) {
  c <- sqrt(x = a^2 + b^2)
  #print(c)
  lst <- list(x = a, y = b, z = c)
  return(lst)
}

result <- Pythagoras(a = 3, b = 4)
result$x


#실습 : 숫자 벡터의 크기를 반환하는 함수 만들기
-숫자 벡터에 대해 모든 원소 제곱합의 양의 제곱근을 반환하는 함수를 생성한다.

>vec <- 1:5
print(x = vec)
vec^2
sum(vec^2)
sqrt(sum(vec^2))

getVecLen <- function(vec) {
  vecLen <- sqrt(x = sum(vec^2))
  return(vecLen)
}

getVecLen(vec = 1:5)
getVecLen(vec = c(48, 39, 49, 60, 19))


#실습 : 인자의 기본값 설정
-function() 함수 안에 인자를 포함시킬 때 기본값(default value)을 설정한다.

>guessHeight <- function(na
me, height = 173) {
  answer <- paste(name, '님의 키는', height, 'cm입니다', sep = ' ')
  return(answer)
}

guessHeight(name = '홍길동')
guessHeight(name = '홍길동', height = 185)



#실습 : 숫자 맞추기 게임을 함수로 생성하기
-어떤 값과 같은지 또는 크거나 작은지 여뷰를 반환하는 함수를 생성한다.

>guessNumber <- function() {
  number <- sample(x = 10:99, size = 1)
  
  while(TRUE) {
    guess <- readline('두 자리 숫자를 입력하세요: ')
    
    if (guess == number) {
      cat('정답입니다.')
      break
    } else if (guess > number) {
      cat('>> 틀렸습니다. 더 작은 숫자를 입력하세요!\n\n')
    } else if (guess < number) {
      cat('>> 틀렸습니다. 더 큰 숫자를 입력하세요!\n\n')
    }
  }
}

guessNumber()


##사용자 정의 함수를 R파일로 불러오기!!

-패키지를 호출하면 그 패키지에 속한 함수를 사용할 수 있듯이, 사용자 정의 함수를 R파일로 저장한 다음 source() 함수를 불러오면
 패키지를 호춣하는 것과 비슷한 효과를 낼 수 있다.

 -앞에서 생성했던 guessHeight() 함수와 guessNumber() 함수를 'my_funs.R'파일로 저장한 다음 source() 함수를 실행하여 R파일을 불러오면
  Environment에 2개의 사용자 정의 함수가 보인다.
  


























