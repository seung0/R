2020-06-28

R 6강

#데이터프레임 전처리(tidyr 패키지 사용법)

>
library(tidyverse)
library(readxl)

getwd()
list.files(pattern = 'KBO')

stat <- read_xlsx(2019_KBO_Win.xlsx')
stat <- stat %>% rename(이름 = 선수명)

*이 때 rename 함수에서 오류가 뜨면 앞에 dplyr:: 붙여주면 결과값 반환
 (stat이라는 패키지가 존재해서 오류뜨는 것)

-데이터프레임은 형태에 따라 'Long type'과 'Wide type'으로 구분할 수 있다.
-일반적으로 데이터 분석에 사용되는 데이터셋은 'Wide type'의 데이터프레임인데,
 경우에 따라서는 준비된 데이터셋의 형태가 'Long type'일 수 있다.
 (따라서, 'Wide type과 Long type의 데이터프레임의 형태를 자유자재로 변환할 수 있어야 한다.')
-데이터프레임 변환에는 tidyr패키지의 gather(), spread() 함수가 사용된다.
 *gather()함수는 Wide type을 Long type으로 변경
 *spread()함수는 Long type을 Wide type으로 변경


#gather() 함수 활용법

-Wide type을 Long type의 데이터프레임으로 변환하려면 gather()함수를 사용한다.
 >data : 'Wide type'의 데이터프레임을 할당
 >key : 데이터프레임의 컬럼명을 원소로 갖는 새로운 컬럼명을 지정한다.
 >value : 데이터프레임의 원소에 대한 새로운 컬럼명을 지정한다.
 >key와 value에 할당된 기존 데이터프레임의 따옴표 없는 컬럼명 또는 인덱스를 지정한다.
  (가장 왼쪽에 위치할 컬럼을 마이너스(-) 부호로 제거하는 형태도 가능)
 >na.rm : TRUE를 할당하면 'value'에서 NA가 있는 행을 지운다.


 #실습 : 'Wide type'을 'Long type'으로 변환

-'stat'에서 상위 10명의 타자의 일부 컬럼만 선택하여 'Long type'으로 변환

>
longDf <- stat %>%
  slice(1:10) %>%
  select(이름, 경기, 타석, 타수, 안타, 홈런) %>%
  gather(key = '구분', value = '스탯', -이름, na.rm = TRUE)

  *'구분'컬럼에 기존 데이터프레임의 컬럼명들이 들어간다.
   '스탯'컬럼에 기존 데이터프레임의 원소들이 들어간다.

  *select[2:6]도 가능



#spread()함수 활용법

-'Long type'을 'Wide type'의 데이터프레임으로 변환하려면 spread()함수를 사용한다.
 >data : 'Long type'의 데이터프레임을 할당한다.
 >key  : 데이터프레임에서 'Wide type'의 컬럼명으로 펼칠 컬럼명을 지정한다.
 >value : 데이터프레임에서 'Wide type'의 원소로 채울 컬럼명을 지정한다.
 >fill : 데이터프레임에서 'Wide type'으로 펼쳤을 때 빈 칸을 채울 값을 지정한다. (ex. NA)


#실습 : 'Long type'을 'Wide type'으로 변환

-'longDf' 객체를 'Wide type'으로 변환한다.

>
wideDf <- longDf %>%
  spread(key = '구분', value = '스탯', fill = NA)


 #purr 패키지 소개

 -데이터프레임 전처리 과정에서 여러 컬럼에 대해 같은 함수를 반복 실행해야 할 때가 종종 발생한다.
  (R의 기본함수로는 apply() 계열 함수가 사용된다.)
 -for() 반복문을 사용해서 문제를 해결하는 것이 가장 손쉬운 방법이 될 수 있지만,
  처리 속도가 상대적으로 오래 걸린다는 단점이 있다.
 -purr패키지는 리스트의 원소 또는 데이터프레임의 컬럼에 대해 어떤 함수를 반복 실행해야 할 때 사용할 수 있는 좋은 대안이 된다. 
  (tidyverse패키지를 호출하면 purr패키지도 동시에 호줄된다.)


#실습 : 같은 함수 반복 실행

-purr패키지의 map()함수는 리스트의 원소나 데이터프레임의 컬럼에 대해 같은 함수 기능을 반복하여 수행하며, 그 결과를 리스트 형태로 반환한다.
 (map(), map_if(), map_at() 함수는 항상 리스트 형태의 객체를 결과로 반환한다.)

>
map(.x = stat[, 3:19], .f = mean, na.rm = TRUE)
map_if(.x = stat, .p = is.numeric, .f = mean)
map_at(.x = stat, .at = 3:19, .f = mean)

*lapply() 함수와 같은 결과를 반환함
*항상 list로 반환
*mean() 했을 때 NA 값이 한 개라도 있으면 'NA'로 반환됨
따라서, na.rm = TRUE 해주면 NA 값은 빼고 계산해준 결과값을 볼 수 있다.


#실습 : 같은 함수 반복 실행

-map() 함수의 실행 결과가 리스트가 아닌 벡터로 반환하는 함수도 있다.
 (map_lgl(), map_int(), map_dbl(), map_chr())

>
map_lgl(.x = stat, .f = is.numeric)  -->'stat' 객체의 각 컬럼이 숫자 벡터인지 여부를 TRUE 또는 FALSE로 반환
map_int(.x = stat, .f = is.numeric)  -->'stat' 객체의 각 컬럼이 숫자 벡터인지 여부를 정수 1(TRUE) 또는 0(FALSE)로 반환
map_dbl(.x = stat, .f = is.numeric)  -->'stat' 객체의 각 컬럼이 숫자 벡터인지 여부를 실수 1(TRUE) 또는 0(FALSE)로 반환
map_chr(.x = stat, .f = is.numeric)  -->'stat' 객체의 각 컬럼이 숫자 벡터인지 여부를 문자 TRUE 또는 FALSE로 반환
map_chr(.x = stat, .f = class)  -->'stat' 객체의 각 컬럼의 class를 문자로 반환 (integer, numeric, character 등)


#실습 : 같은 함수 반복 실행

-map() 함수의 실행 결과를 데이터프레임으로 반환해야 할 때가 많다.
 (map_df(), map_dfr(), map_dfc() 함수는 데이터프레임 형태의 객체를 결과로 반환한다.)

>
map_df(.x = stat[, 3:19], .f = mean, na.rm = TRUE)   --> tibble로 만들어짐

map_df(.x = stat[, 3:19], .f = mean, na.rm = TRUE) %>%
 map_dfc(.f =  ~ .) --> list로 반환된 map() 반환값을 컬럼별 평균으로 cbind() 해준다.

map_df(.x = stat[, 3:19], .f = mean, na.rm = TRUE) %>%
 map_dfr(.f = ~data.frame(평균 = .)) --> map_dfr() 함수는 컬럼별 평균을 rbind() 해준다.


#실습 : 열(컬럼) 속성 변경

-이번 예제인 'stat'에서 문자 벡터에 해당하는 컬럼은 '이름'과 '팀명' 등 2가지인데, '팀명' 컬럼은 범주형 벡터로 변경하는 것이 좋다.

>
stat$팀명 <- as.factor(stat$팀명)
map_chr(stat, class) 
*팀명이 factor로 바뀐 것을 확인

class(stat)와
map_chr(stat, class) 차이

--> stat의 class를 나타낸다. (data.frame), 후자는 stat에 있는 컬럼별 class를 나타낸다.

stat[, 3:12] <- map_df(.x = stat[, 3:12], .f = as.integer)

->stat의 3열부터 12열까지의 컬럼은 정수형으로 바꿔서 데이터프레임으로 반환


#stingr 패키지 사용법

-stringr 패키지는 문자 데이터를 다루는데 필요한 주요 함수를 담고 있다.
 >R기본 함수로도 충분히 가능하지만, 문제는 파이프 연산자를 사용할 수 없는 경우가 있다.
  따라서, 이럴 경우 텍스트 전처리를 위해 stringr 패키지를 사용한다.

-stringr 패키지의 주요 함수로는 다음과 같은 작업을 할 수 있다.
 >여러 개의 문자열을 하나로 묶음(str_c)또는 구분자 기분으로 분리(str_split)
 >패턴 포함 여부 확인(str_detect), 삭제(str_remove), 교체(str_replace), 및 추출(str_extract)
 >문자열에 패턴이 포함된 횟수 반환(str_count), 문자열을 인덱스로 자르기(str_sub)
 >문자열의 양 옆에 있는 공백 제거(str_trim) 등


-모든 함수명이 'str_'로 시작한다.
-거의 모든 함수의 첫 번째 인자는 'string'이다
 (string인자에는 문자열 또는 문자열을 원소로 갖는 문자형 벡터를 할당)
-'string'인자 다음에 오는 두 번째 인자는 'pattern'이다.
 (pattern인자에는 정규표현식을 할당)
-거의 모든 함수는 실행 결과로 벡터를 반환한다.

 *str_split() 및 str_extract_all() 함수만 리스트 자료형으로 결과를 반환


 #실습 : 여러 개의 문자열을 하나로 묶음

 -두 개 이상의 문자열을 하나의 커다란 문자열로 묶을 수 있다. 
  >
  str_c(stat$팀명, stat$이름)
  str_c(stat$팀명, stat$이름, sep = ' ')
  str_c(stat$이름, collapse = ' ')
  *벡터의 원소를 커다란 문자열로 합칠 때에는 sep인자 대신 collapse인자 사용
   (벡터 1개만 주니까 그 벡터를 붕괴시켜야함)

-'팀명'과 '이름' 벡터의 대응하는 원소를 문자열로 묶음 '선수'컬럼을 추가
 >
 stat$선수 <- str_c(stat$팀명, stat$이름, sep = ' ')


#실습 : 문자열을 구분자로 분리

-하나의 문자열을 특정 구분자를 기준으로 여러 개의 문자열로 분리할 수 있다.
 (단, 결과는 리스트로 반환)
 >
 str_split(string = stat$선수, pattern = ' ')

-str_split(string = stat$선수, pattern = ' ', simplify = TRUE)
 simplify인자에 TRUE를 할당하면 실행 결과를 리스트 대신 행렬도 반환한다.
 (나중에 데이터프레임으로 쉽게 변환할 수 있다.
  %>% as.data.frame())


#실습 : 문자열에 패턴 포함 여부 확인

-특정 컬럼에서 찾는 패턴이 포함되어 있는지 여부를 확인할 수 있습니다. 
 (포함하고 있으면 TRUE, 포함하고 있지 않으면 FALSE 반환)

>
str_detect(string = stat$팀명, pattern = 'SK')
str_detect(string = stat$이름, pattern = '^최') %>%
 sum()

*TRUE의 갯수를 반환함

str_detect(string = stat$이름, pattern = '정$')


#실습 : 패턴을 한 번 또는 모두 삭제

-문자열에서 맨 처음 나오는 패턴을 한 번 삭제할 수 있다.
>
str_remove(string = stat$이름, pattern = '^[가-힣]')

-지정한 패턴이 여러 번 나오는 경우, 모두 삭제할 수 있다.
>
sen <- '오늘 오전 내용은 쉽고 오후 내용은 어렵습니다.'
str_remove(string = sen, pattern = ' ')     --> 맨 처음 공백 하나만 삭제
str_remove_all(string = sen, pattern = ' ') --> 모든 공백 삭제

str_remove(string = stat$이름, pattern = '^[가-힣]') %>%
 table() %>%
 sort(decreasing = TRUE)


#실습 : 패턴을 한 번 또는 모두 교체

-문자열에서 맨 처음 나오는 패턴을 한 번 교체할 수 있다.
>
str_replace(string = stat$이름, pattern = '^양', replacement = '강')

-지정한 패턴이 여러 번 나오는 경우, 모두 교체할 수 있다.
>
str_replace(string = sen, pattern = ' ', replacement = '_')     --> 첫 번째 공백을 _로 반환
str_replace_all(string = sen, pattern = ' ', replacement = '_') --> 모든 공백을 _로 반환


#실습 : 패턴을 한 번 또는 모두 추출

-문자열에서 맨 처음 나오는 패턴을 추출할 수 있다.
>
str_extract(string = stat$이름, pattern = '^[가-힣]')
*선수 이름 중 맨 첫 글자만 추출

-지정한 패턴이 여러 번일 때 모두 추출할 수 있다.(단, 결과는 리스트)
>
str_extract(string = sen, pattern = '내용')
str_extract_all(string = sen, pattern = '내용', simplify = TRUE)
str_extract_all(string = sen, pattern = '오전|오후', simplify = TRUE)
str_extract_all(string = sen, pattern = '오[전후]', simplify = TRUE)
str_extract_all(string = sen, pattern = '오.', simplify = TRUE)

*simplify인자에 TRUE할당하면 행렬로 반환


#실습 : 문자열을 인덱스로 자르기

-문자열의 인덱스를 이용하여 필요한 부분만 자를 수 있다.
>
str_sub(string = stat$이름, start = 1, end = 1) %>%
 table() %>%
 sort(decreasing = TRUE) %>%
 head(n = 10L)


#실습 : 기타 유용한 함수들

-문자열에 포함된 패턴의 갯수를 확인
>str_count(string = sen, pattern = '내용')

-문자열의 길이를 확인
>str_length(string = sen)

-문자열 앞뒤에 있는 불필요한 공백을 제거
>str_trim(string = sen)


#실습 : 텍스트 데이터 전처리
-'팀명' 컬럼의 빈도수를 확인하려면 키움 히어로즈만 야구단 이름인 'Hero'이다.
>table(stat$팀명)

-스폰서인 '키움'으로 변경하고(문자형으로 변경됨), 다시 범주형 벡터로 변환
>stat$팀명 <- str_replace(string = stat$팀명, pattern = 'Hero', replacement = '키움')

>stat$팀명 <- as.factor(stat$팀명)


#실습 : 텍스트 데이터 전처리

-'이름' 컬럼을 출력
>print(stat$이름)

-일부 선수의 이름 뒤에 '*'이 추가된 것으로 보이는데 불필요하니 삭제
>stat$이름 <- str_remove(string = stat$이름, pattern = '//*$')

-일부 선수의 이름 뒤에 '(타)'가 추가된 것으로 보이는데 불필요하니 삭제
>stat$이름 <- str_remove(string = stat$이름, pattern = '\\(타\\)')



#실습 : 중복 데이터 확인

-데이터프레임의 행 단위, 또는 데이터프레임의 특정 컬럼에 대해 원소의 중복이 포함되어 있는지 확인하고자 할 때
 duplicated() 함수를 사용한다.
 (duplicated() 함수는 'x'인자에 할당된 R객체에 대해 처음 나오는 값은 FALSE, 반복되는 값은 TRUE를 반환한다.)

>nums <- c(1, 2, 3, 1, 3, 4, 2, 4, 5, 6, 3, 5)
 duplicated(nums) %>%
 sum()

 *중복 건수 출력 가능


#실습 : 중복 건 삭제

-데이터프레임에서 전체가 중복되는 행을 삭제하는 방법
>imsi <- unique(stat)
 imsi <- stat %>%
  filter(duplicated(stat) == FALSE)


-만약 모든 컬럼에 대한 중복을 확인하는 것이 아니라 특정 컬럼에서 중복되는 행을 삭제하고자 할 때에는 원하는 컬럼을 지정
>imsi <- stat %>%
  filter(duplicated(stat$팀명) == FALSE)
*duplicated() 함수를 사용해서 처음 나오는 값만 filtering 하는 개념





#정규표현식에 대한 이해

-정규표현식(regular expression 또는 regex)은 특정 패턴(규칙)을 갖는 문자열의 집합을 표현하는데 사용하는 언어
 (복잡한 문자열에서 특정 패턴과 일치하는 문자열을 찾거나, 다른 값으로 대체할 대 주로 사용)
-많은 프로그래밍 언어가 정규표현식 기능을 제공
-R 정규표현식의 특징은 escape 문자가 두 번(\\) 사용된다라는 점
 (보통 프로그래밍 언어에서는 역슬래시가 한 번 사용)


#실습 : 한 글자 패턴

strs <- c('abCD', '1234', '가나다라', 'ㅋㅎㅜㅠ', '\r\n\t\\', '-_,./?')

nchar(strs)  --> 문자열 길이 확인

str_extract_all(string = strs, pattern = ' ', simplify = TRUE)  --> 개행(\r\n)을 제외한 모든 문자 지정

>str_extract_all(string = strs, pattern = '\\w')
 str_extract_all(string = strs, pattern = '\\d')
 str_extract_all(string = strs, pattern = '\\s')
 str_extract_all(string = strs, pattern = 'a|b')
 str_extract_all(string = strs, pattern = '[ab]')
 str_extract_all(string = strs, pattern = '[a-z]')
 str_extract_all(string = strs, pattern = '[A-Z]')
 str_extract_all(string = strs, pattern = '[0-9]')
 str_extract_all(string = strs, pattern = '[ㄱ-ㅎ]')
 str_extract_all(string = strs, pattern = '[ㅏ-ㅣ]')
 str_extract_all(string = strs, pattern = '[ㄱ-ㅣ]')
 str_extract_all(string = strs, pattern = '[가-힣]')
 str_extract_all(string = strs, pattern = '[^가-힣]')


#실습 : 수량자
-글자수를 조절하는 수량자 패턴
nums <- c('1', '23', '456', '7890')
str_extract(string = nums, pattern = '\\d+')
str_extract(string = nums, pattern = '\\d*')
str_extract(string = nums, pattern = '\\d{2}')
str_extract_all(string = nums, pattern = '\\d{2}')

str_extract(string = nums, pattern = '\\d{3,4}')
str_extract(string = nums, pattern = '\\d{4,}')


#탐욕적 수량자 vs 게으른 수량자
-탐욕적 수량자에서 '탐욕적(greedy)'의 의미는 정규표현식에 매칭되는 가장 큰 덩어리의 문자열을 반환하기 때문이다.
 이에 반해, 게으른 수량자에서 '게으른(lazy)'의 의미는 정규표현식에 매칭되는 가장 작은 덩어리의 문자열을 반환한다.

>str <- '<p>이것은<br>HTML<br>입니다</p>'
str_extract_all(string = str, pattern = '<.+>')
-->"<p>이것은<br>HTML<br>입니다</p>"

str_extract_all(string = str, pattern = '<.+?>')
-->"<p>" "<br>" "<br>" "</p>"



#실습 : 이스케이프


>str <- '우리집 강아지는 (복슬강아지)입니다.'

str_extract(string = str, pattern = '(.+)')
-->"우리집 강아지는 (복슬강아지)입니다."

str_extract(string = str, pattern = '\\(.+\\)')
-->"(복슬강아지)"

































