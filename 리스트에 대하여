2020-06-15

R 2강

#리스트
-R객체 중 가장 광범위하게 사용되는 자료형으로 스칼라, 벡터, 행렬, 데이터프레임, 리스트 등 다양한 형태의 객체를 모두 원소로 가질 수 있다.
 따라서, 리스트 객체는 쉽게 생성할 수 있지만, 생성된 리스트에서 원소를 추출하는 것은 생각보다 복잡할 수 있다.
-리스트 객체의 원소를 선택할 때는 겹대괄호[[]]를 사용한다.
 만약 벡터처럼 홑대괄호 안에 인덱스를 지정하면 해당 원소가 리스트 자료형으로 반환된다.
 하지만 겹대괄호 안에 인덱스를 지정하면 해당 원소가 자신의 속성대로 반환된다.
-리스트에 원소명이 있으면 '$'기호를 사용하여 해당 원소와 연결할 수 있다.
*원소명이 없으면 반드시 겹대괄호([[]]) 이용해야 한다.

#리스트 생성 함수
-list() 함수를 사용 : list() 함수 안에 원소를 콤마(,)로 연결하여 할당
                   각 원소 앞에 원소명을 지정할 수 있다. (이 때는 등호 사용)
                   *리스트를 생성할 때 원소명을 지정해주는 것이 좋다. 왜냐하면 리스트에 원소명이 있으면 '$'기호로 연결하기 쉽기 때문이다.
                   (만약 원소명을 지정하지 않았다면 반드시 겹대괄호 사용!)
-리스트를 벡터로 변환하려면 unlist() 함수를 사용 : 리스트의 원소를 모두 벡터의 원소로 변환하는 과정에서 강제변환(coercion)이 발생한다.


#리스트 생성

num <- 1:5
char <- LETTERS[6:10]
logi <- rep(x = c(T, F), each = 3)

이 세 벡터를 가지고 list를 만들면,
lst1 <- list(a = num, b = char, c = logi)

(각각 앞에 a, b, c라고 이름을 붙여줌)

print(lst1) 실행하면

$a
[1] 1 2 3 4 5

$b
[1] "F" "G" "H" "I" "J"

$c
[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE

class(lst1) 실행하면

"list"

str(object = lst1)  or str(lst1) 실행하면
 $ a: int [1:5] 1 2 3 4 5
 $ b: chr [1:5] "F" "G" "H" "I" ...
 $ c: logi [1:6] TRUE TRUE TRUE FALSE FALSE FALSE

*str() 함수를 실행하면 리스트 자료형의 구조를 한 눈에 파악할 수 있다.


#원소명을 지정하지 않은 리스트 객체를 생성

lst2 <- list(num, char, logi, lst1)

print(lst2) 실행하면

[[1]]
[1] 1 2 3 4 5

[[2]]
[1] "F" "G" "H" "I" "J"

[[3]]
[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE

[[4]]
[[4]]$a
[1] 1 2 3 4 5

[[4]]$b
[1] "F" "G" "H" "I" "J"

[[4]]$c
[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE

*원소명을 지정하지 않아 겹대괄호로 나타냄

class(lst2)를 실행하면

"list"

str(lst2) 실행하면
$ : int [1:5] 1 2 3 4 5
 $ : chr [1:5] "F" "G" "H" "I" ...
 $ : logi [1:6] TRUE TRUE TRUE FALSE FALSE FALSE
 $ :List of 3
  ..$ a: int [1:5] 1 2 3 4 5
  ..$ b: chr [1:5] "F" "G" "H" "I" ...
  ..$ c: logi [1:6] TRUE TRUE TRUE FALSE FALSE FALSE


#리스트의 인덱싱과 슬라이싱
-리스트 객체를 인덱싱할 때 겹대괄호를 사용하며, 만약 원소명이 지정된 경우에는 '$'기호를 사용할 수 있다.

lst1[[1]]  : 'lst1' 객체의 첫 번째 원소를 자신의 속성인 벡터로 반환
---->  1 2 3 4 5

lst1$a     : 'lst1' 객체의 원소명이 'a'인 원소를 자신의 속성인 벡터로 반환 (원소명을 지정해줬기 때문에 가능)
---->  1 2 3 4 5


lst2[[1]] -----> 1 2 3 4 5

lst2$a    -----> NULL (원소명이 없기 때문에 '$' 사용 불가능)


-겹대괄호 대신 홑대괄호를 사용하면 리스트 객체로 반환

lst2[2]   : lst2 객체의 두 번째 원소를 리스트로 반환
lst2[2:4] : lst2 객체의 2~4번째 원소를 리스트로 반환

lst2[[4]] : 자신의 속성인 리스트로 반환 (lst2의 4번 째 객체 속성은 list이기 때문에 그대로 반환)


lst2[[4]]$b
lst2[[4]]$b[2:4] 과 같이 슬라이싱 가능

**리스트에서 홑대괄호는([]) 자신의 속성을 그대로 나타내주고, 겹대괄혼([[]])는 무조건 리스트로 반환한다.




 



































