2020-06-09

R 1강

#R이란?
-통계 계산과 그래픽을 위한 프로그래밍 언어
 통계 소프트웨어 개발과 자료 분석에 널리 사용되고 있으며, 패키지 개발이 용이해 통계 소프트웨어 개발에 많이 사용되고 있다.
 *현재 1.5만여 개의 R패키지가 CRAN에 등록되어 있는데 CRAN은 The Comprehensive R Archive Network의 머리글자로, R 및 패키지 저장소이다.

 #R 다운로드 및 설치
 -CRAN에서 OS에 맞는 R프로그램 최신 버전 다운로드

 설치 후 R을 실행하면 R Console이라는 창이 열리는데, 콘솔에서는 대화식으로 R 명령어를 처리할 수 있지만 여러 행으로 된 코드를 만들고 실행하는 것이 불편하다.
 (여러 행의 코드를 작성하여 R파일로 저장하면 Rscript 프로그램으로 Windows는 Command Line, Mac은 Terminal에서 R파일을 실행할 수 있지만 상당히 불편)

 따라서, 컴퓨터 프로그래밍 언어마다 손쉽게 프로그래밍을 할 수 있도록 제공되는 프로그램이 있는데 이를 IDE(Integrated Development Environment)라고 한다.
 -->R의 IDE는 R studio 딱 하나 있음!

 그러므로, R studio도 별도로 설치해주어야 한다. (http://rstudio.com/products/rstudio/download)

 R studio를 실행하면 스크립트, 콘솔, 작업공간, 파일과 플롯과 같은 4개의 영역으로 나뉘어 있다. 
 -스크립트 : 명령어 작성 및 실행
 -콘솔 : 명령어 실행 결과 출력
 -작업공간 : R 객체와 실행 이력 
 -파일과 플롯 : 외부 데이터 파일과 이미지 출력 결과 확인

 #R 패키지 설치 방법
  1) 파일과 플롯 영역에 있는 Packages 창에서 Install 버튼을 클릭하면 패키지 설치 팝업이 뜬다.
     여기에 설치하려는 패키지명 입력

  2) Rstudio의 코드 창 또는 콘솔 창에서 함수를 이용하여 설치
     >install.packages('tidyverse')
     만약에 CRAN에 등록되어 있지 않고, github으로 공개된 패키지를 설치하려면 
     >library(remotes)
     >install_github(repo = 'github_user_name/package_name')
     *github에 공개되어 있는 패키지 중에 용량이 큰 패키지는 guideline을 따라서 별도로 설치
#유용한 옵션
-R studio 상단 메뉴 중 Tools > Global Options > Code > Editing > Soft-wrap R source files 체크 (스크립트 창에서 코드가 길어질 때 자동으로 줄바꿈)
                                                  > Display > Highlight selected line 체크 (마우스로 선택한 행의 코드 하이라이트)
                                                            > Show indent guides 체크 (들여쓰기 간격을 눈으로 확인)
                                                  > Saving  > Defaulting text encoding을 UTF-8로 변경 (Rstudio 내부에서 생성되는 문자 인코딩 방식을 설정)
#R 객체(object)의 특징          
-R은 변수(variable) 대신 객체(object)를 사용 (객체는 attributes와 methods를 가진 데이터 구조)
-R의 객체는 사전에 class를 정의할 필요가 없다.
-R의 객체명은 대소문자를 구분하며 영문과 한글, 숫자를 함께 사용할 수 있지만 반드시 문자로 시작해야한다.
-R은 객체에 다른 객체를 할당(assign)하면, 그 객체의 값이 저장된다.
 (python의 경우, 한 변수를 다른 변수에 할당하면 서로 연결)

 #R의 기본 구문(Syntax)
 -R의 명령 프롬프트는 '>'
 -객체로 사용할 문자열이 먼저 오고, 할당 연산자 ('<-' 또는 '=') 오른쪽에는 객체에 저장할 값을 입력
  (할당연산자 ('<-'')를 입력하는 단축키는 [option +  -], 명령어 실행은 [command + enter])
 -R 함수 사용시, 인자(argument)에 값을 할당한다. (인자에 값을 할당하는 연산자는 '='만 사용한다.)
  ex) 함수에서는 (x =  )만, 객체는 [x <-  ], [x =  ] 둘 다 가능

#벡터의 생성 및 결과 확인

-문자열 'hello world!'를 'sen'이라는 객체에 할당하고, 그 결과를 출력
sen <- 'hello world!'
print(x = sen)
print(sen)
sen
--->"hello world!"

-벡터의 속성 확인
class(sen)
class(x = sen)
---->"character"

-백터의 원소 개수 확인
length(sen)
length(x= sen)
----> 1

-벡터의 글자 수 확인
nchar(sen)
nchar(x= sen)
----> 12

#R객체의 특징
-원소가 1개인 벡터를 생성한다.
a <- 1;print(x = a)
a <- 1
print(x = a)
*세미콜론(;)을 사용하면 한 줄에 여러 명령어를 쓸 수 있다.

b <- 2;print(x = b)
a <- b;print(x = a)
print(x = a);print(x = b)
*객체 'b'의 값이 바뀌어도 객체 'a'의 값은 유지된다.

-R객체명을 숫자로 시작하면 에러가 발생한다. 
1a <- 3
----> error!

**해결방법!
반드시 객체명을 숫자로 시작해야 할 때면 앞뒤로 'backtick(')을 씌운다. (esc버튼 아래 위치)
`1a`<- 3
print(x = `1a`)

#R 자료형의 종류
R 객체의 자료형(data type)은 크게 5가지로 구분할 수 있다. 
-벡터(vectors) : 같은 형태의 원소가 모인 집합, R에서 가장 기본이 되는 자료형으로 속성이 같은 원소를 갖는 1차원 자료형
-행령(Matrices) : 벡터를 행과 열이 있는 2차원의 형태로 변환한 자료형 (ex. 흑백 사진)
-배열(Arrays) : 행렬을 몇 겹으로 쌓은 3차원 자료형 (ex. 컬러 사진)
-데이터 프레임(Data Framse) : 길이가 같은 열벡터를 원소로 갖는 2차원 자료형. 벡터끼리는 서로 속성이 달라도 된다! --> 가장 많이 다룸
 *조건 : 각각 벡터의 길이가 같아야 한다. (확인하기 위해 length 사용)
-리스트(Lists) : 위에서 언급된 모든 자료형을 원소로 가질 수 있는 가장 광범위하게 사용되는 1차원 자료형. 리스트 객체도 원소로 가질 수 있다. --> 넣을 때는 좋은데, 꺼내 쓸 때 어려움

#벡터의 종류
-논리형(logical) : 따옴표 없이 대문자 TRUE와 FALSE로 쓰며 각각 1과 0의 값을 갖는다.
-정수형(integer) : 음의 정수와 양의 정수 및 0의 값을 원소로 갖는다. ('숫자L' 형태)
-실수형(numeric 또는 double) : 실수인 숫자를 원소로 갖는다.
-문자형(character) : 따옴표가 사용되는 문자 및 문자열(string)을 원소로 갖는다.
-범주형(Factors) : 명목형/서열형에 사용되며, 정수(levels)와 문자열(labels)로 저장된다. ---> 순서값이 포함되어 있음!

#벡터의 특징
-R 자료형 중에서 가장 기본이 되는 형태로, 1차원 배열(array)이다. (스칼라, Scalar는 원소가 1개인 벡터)
-벡터는 속성이 같은 스칼라를 원소로 갖는다.
-벡터는 원소가 입력된 순서를 유지한다.
-기존 벡터에 속성이 다른 스칼라가 추가되면 강제변환(coercion)이 발생한다.

#2개 이상의 원소를 갖는 벡터 생성 관련 함수
-c()함수 : 원소를 직접 입력  -->범주형을 제외한 모든 벡터 자료형에 사용 가능

c(TRUE, FALSE) -----> TRUE FALSE  (논리형 벡터)
c(1L, 2L, 3L)  -----> 1 2 3  (정수형 벡터)
c(1, 2, 3).    -----> 1 2 3  (실수형 벡터)
c('a', 'b', 'c', 'd', 'e') -----> "a" "b" "c" "d" "e"  (문자형 벡터)
c('가', '나', '다', '라', '마') -----> "가" "나" "다 "라" "마" (원소가 입력된 순서 유지)

-seq() 함수 : 연속된 숫자를 생성한다. 'by'인자의 기본값은 1이다.
seq(from = 1, to = 3, by = 1) ----> 1 2 3
1 : 3                         ----> 1 2 3
3 : 1                         ----> 3 2 1
seq(from = 1, to = 10, by = 2.5) ----> 1.0 3.5 6.0 8.5 
seq(from = 3, to = 1, by = -1)   ----> 3 2 1
seq(from =1, to = 10, length.out = 19)  ----> 1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0 9.5 10.0
*length.out은 원소의 수를 정해놓고 그 수에 맞게 결과값이 나오도록 한다. (간격(by)가 중요하지 않고 길이를 알고 있을 때 사용)

-rep()함수 : 'x'인자에 할당된 값 또는 벡터를 반복한다.
rep(x = 1:3, times = 10) ----> 1 2 3 1 2 3 1 2 3 ....
rep(x = 1:3, each = 10)  ----> 1 1 1 2 2 2 3 3 3 ....
rep_len(x = 1:3, length.out = 9) ----> 1 2 3 1 2 3 1 2 3
rep_len(x = 1:3, length.out = 10) ----> 1 2 3 1 2 3 1 2 3 1
rep_len(x = 1:3, length = 10) ----> 1 2 3 1 2 3 1 2 3 1
*length.out 인자 대신 length를 사용할 수 있음!

-R 내장 문자 벡터 : R에는 알파벳 대문자와 소문자가 지정된 문자 벡터가 있다.
 -> letters : a부터 z까지 26개의 영어 소문자를 원소로 갖는 문자 벡터
 -> LETTERS : A부터 Z까지 26개의 영어 대문자를 원소로 갖는 문자 벡터

letters         
print(x = letters)
print(letters)
위 함수 모두 ----> "a" .... "z"

class(x = letters) ----> "character"
class(letters)     ----> "character"
length(letters)    ---->  26
nchar(letters)     ----> 1 1 1 1 .... (26개)
*대문자도 마찬가지!

#문자형 벡터 관련 함수
-원소가 2개 이상인 문자형 벡터를 생성하고 각 원소의 길이를 반환한다.
terms <- c('I', 'am', 'a', 'boy') -----> 벡터 생성
length(x = terms) ----> 4 (백터 원소의 수)
nchar(x = terms)  ----> 1 2 1 3 (각 원소별 글자 수)

-두 개 이상의 문자열을 커다란 문자열로 합칠 때에는 paste()함수를 사용
paste('I', 'am', 'a', 'boy', sep = '') ---->"Iamaboy"
paste(terms, collapse = '')            ---->"Iamaboy"

*각 원소를 써줄지, object를 써줄지에 따라 뒤에 sep, collapse함수를 사용해줘야 한다.

-문자형 벡터에서 각 원소별로 특정 패턴을 포함하고 있는지 확인할 수 있다.
grep(pattern = 'a', x = terms) ----> 2 3
grepl(pattern = 'a', x = terms) ----> FALSE TRUE TRUE FALSE (TRUE와 FALSE를 반환)
grep(pattern = 'a', x = terms, value = TRUE) ----> "am" "a"

-문자형 벡터에서 각 원소별로 특정 패턴을 다른 패턴으로 변경할 수 있다.
gsub(pattern = 'a', replacement = 'b', x = terms) ----> "I" "bm" "b" "boy"








